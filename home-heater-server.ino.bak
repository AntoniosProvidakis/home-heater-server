//----- Bluetooth stuff -----//
const char SOM = '<';
const char EOM = '>';
const char* EQUALS = "=";
const char* COMMA = ",";
const int BUFFER_SIZE = 128;

typedef struct {
  bool started;
  bool ended;
  char message[BUFFER_SIZE];
  byte index;
} MessageBuffer;

void receiveMessage(MessageBuffer *mb) {
  char inChar;
  while (Serial.available() > 0) {
    inChar = Serial.read();

    if (inChar == SOM) {
      mb->index = 0;
      mb->message[mb->index] = '\0';
      mb->started = true;
      mb->ended = false;
    }
    else if (inChar == EOM) {
      mb->ended = true;
      break;
    }
    else {
      if (mb->index < BUFFER_SIZE - 1) {
        mb->message[mb->index] = inChar;
        mb->index++;
        mb-> message[mb->index] = '\0';
      }
    }
  }
}

bool readyToParseMessage(MessageBuffer *mb) {
  return mb->started && mb->ended;
}

void resetMessageBuffer(MessageBuffer *mb) {
  mb->started = false;
  mb->ended = false;
  mb->index = 0;
  mb->message[mb->index] = '\0';
}
//--------------------------//

//----- Heater stuff -----//
///// Data Structures /////
typedef struct {
  unsigned int id;
  //  bool enabled;
  // timings in milliseconds
  unsigned long int heat;
  unsigned long int preserve;
  unsigned long int rest;
} Profile;

///// Message Types /////
const char* HEATER_FUNCTION = "HF";
const char* PROFILE_UPDATE = "PU";

///// Interval Type Constants /////
const char* ID_TYPE = "id";
const char* HEAT_TYPE = "heat";
const char* PRESERVE_TYPE = "preserve";
const char* REST_TYPE = "rest";

///// Time Constants /////
const unsigned long SECOND = 1000;
const unsigned long MINUTE = 60 * SECOND;
const unsigned long HOUR = 60 * MINUTE;

///// Function Type Constant /////
const char* ENABLED_TYPE = "enabled";

void initProfile(Profile *p) {
  //  TODO: read from sd card
  // if data found on SD-Card
  //   read from ther
  // else

  // TODO: change to default profile on APP
  p->id = 0;
  p->heat = 5 * SECOND;
  p->preserve = 3 * SECOND;
  p->rest = 2 * SECOND;
}

// DOMAIN-SPECIFIC
void updateProfile(Profile *p, char *nameToken, char *valToken) {
  Serial.println("updateProfile");
  Serial.println("nameToken");
  Serial.println(nameToken);
  Serial.println("valToken");
  Serial.println(valToken);
  Serial.println("-------");

  unsigned long int value = strtoul(valToken, NULL, 10);
  Serial.println("New Value: " + String(value));

  if (strcmp(nameToken, ID_TYPE) == 0) {
    p->id = (unsigned int) value;
    Serial.println("ProfileID changed to: : " + String(value));
  }
  else if (strcmp(nameToken, HEAT_TYPE) == 0) {
    p->heat = value;
    Serial.println("HEAT_INTERVAL changed to: : " + String(value));
  }
  else if (strcmp(nameToken, PRESERVE_TYPE) == 0) {
    p->preserve = value;
    Serial.println("PRESERVE_INTERVAL changed to: : " + String(value));
  }
  else if (strcmp(nameToken, REST_TYPE) == 0) {
    p->rest = value;
    Serial.println("REST_INTERVAL changed to: : " + String(value));
  }
  else {
    Serial.println("Unknown variable type: ");
    Serial.println(nameToken);
  }
}
//------------------------//


//----- System-wide stuff -----//
enum Phase {
  HEATING,
  PRESERVE,
  REST
};

typedef struct {
  bool enabled;
  Phase phase;
  int relayPin;
  MessageBuffer mb;
  Profile p;
} System;


void initSystem(System *sys) {
  sys->enabled = true;
  sys->relayPin = 7;
  initProfile(&sys->p);
}

void disableSystem(System *sys) {
  turnOffRelay(&sys->relayPin);
  sys->enabled = false;
  Serial.println("disableSystem");
}

void enableSystem(System *sys) {
  sys->enabled = true;
  Serial.println("enableSystem");
}

void turnOffRelay(int relayPin) {
  // HIGH = relay switch opens (current NOT passing)
  digitalWrite(LED_BUILTIN, LOW); // DEBUG

  //  digitalWrite(LED_BUILTIN, HIGH);
  //  digitalWrite(relayPin, HIGH);
  Serial.println("turnOffRelay");
}

void turnOnRelay(int relayPin) {
  // LOW = relay switch closes (current passing)
  digitalWrite(LED_BUILTIN, HIGH); // DEBUG

  //  digitalWrite(LED_BUILTIN, LOW);
  //  digitalWrite(relayPin, LOW);
  Serial.println("turnOnRelay");
}

void skipHeatingPhase(System *sys) {
  sys->phase = PRESERVE;
  Serial.println("skipHeatingPhase");
}

void restartHeatingPhase(System *sys) {
  sys->phase = HEATING;
  Serial.println("restartHeatingPhase");
}

// Message of form: <name1=value1,name2=value2>
void parseMessage(System *sys) {
  char *message = sys->mb.message;
  Serial.println("--- in parseMessage ---");
  Serial.println(message);

  char *typeKey = strtok(message, EQUALS);
  Serial.println(typeKey);
  if (typeKey) {
    char *typeValue = strtok(NULL, COMMA);
    if (typeValue) {
      Serial.println(typeValue);
      char* messageWithoutCommandType = strchr(message, COMMA[0]) + 1;
      Serial.println(messageWithoutCommandType);
      processMessage(typeValue, messageWithoutCommandType, sys);
    }
  }
}

void processMessage(char* type, char* message, System *sys) {
  if (strcmp(type, HEATER_FUNCTION) == 0) {
    processHeaterFunctionMessage(message, sys);
  }
  else if (strcmp(type, PROFILE_UPDATE) == 0) {
    processProfileActivationMessage(message, &sys->p);
  }
  else {
    Serial.println("Unknown message type");
    Serial.println(type);
  }
}

void processHeaterFunctionMessage(char* message, System *sys) {
  Serial.println("processHeaterFunctionMessage");

  char *nameToken = strtok(message, EQUALS);
  while (nameToken)  {
    Serial.println(nameToken);
    char *valToken = strtok(NULL, COMMA);
    if (valToken)    {
      Serial.println(valToken);

      if (strcmp(nameToken, ENABLED_TYPE) == 0) {
        boolean enabled = strcmp(valToken, "true") == 0 ? true : false;

        if (enabled) {
          enableSystem(sys);
        }
        else {
          disableSystem(sys);
        }
      }
      else {
        Serial.println("Unknown variable: ");
        Serial.println(nameToken);
      }
    }

    nameToken = strtok(NULL, "=");
  }
}

void processProfileActivationMessage(char* message, Profile *p) {
  Serial.println("processProfileActivationMessage");
  char *nameToken = strtok(message, EQUALS);

  while (nameToken)  {
    Serial.println(nameToken);

    char *valToken = strtok(NULL, COMMA);
    if (valToken) {
      updateProfile(p, nameToken, valToken);
    }

    nameToken = strtok(NULL, "=");
  }
}
//------------------------//

//----- Heater Loop -----//
void heaterLoop(System *sys) {
  if (sys->enabled) {
    Serial.println("heater is enabled");
    if (sys->phase == HEATING) {
      turnOnRelay(sys->relayPin);
      delay(sys->p.heat);
      Serial.println("--- delay: " + String(sys->p.heat));

      skipHeatingPhase(sys);
    }
    else {
      turnOffRelay(sys->relayPin);
      delay(sys->p.rest);
      Serial.println("--- delay: " + String(sys->p.rest));

      turnOnRelay(sys->relayPin);
      delay(sys->p.preserve);
      Serial.println("--- delay: " + String(sys->p.preserve));
    }
  }
  else {
    Serial.println("heater is disabled");
  }
}
//------------------------//




System mySystem;

void setup() {
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB
  }
  pinMode(LED_BUILTIN, OUTPUT);

  Serial.println("--- Init ---");
  initSystem(&mySystem);
  enableSystem(&mySystem);
  turnOnRelay(mySystem.relayPin);
  Serial.println("--- End init ---");
}

void loop() {
  Serial.println("--- loop started ---");
  receiveMessage(&mySystem.mb);

  if (readyToParseMessage(&mySystem.mb)) {
    Serial.println("--- in readyToParseMessage block ---");
    parseMessage(&mySystem);
    resetMessageBuffer(&mySystem.mb);
  }

  heaterLoop(&mySystem);
}

